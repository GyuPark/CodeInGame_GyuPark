//개관


게임 만드는 법을 공부하는 것이 게임을 하는 것만큼이나 재밌다고 느껴야 한다. 
유니티 3D를 학습하면 게임을 개발할 수 있는 지식과 소프트웨어를 작성하는 기술을 모두 갖추게 된다. 
현대 게이밍 플랫폼에서 게임을 개발하는 작업은 c#을 전부 이해하면 쉽게 할 수 있다. 

에러의 종류에는 i)compile time ii)runtime 이 있다. 
runtime은 게임이 실행될 때 발생하고 특정 조건하에만 나타나기 때문에 일반적으로 고치기 어렵다. 
따라서 이 구문을 monodevelop에서 표시하고, 이런 구문을 맞딱뜨리면 작업을 멈추라고 유니티에 지시한다. 
이렇게 표시해두면 모든 데이터와 데이터값을 검토할 수 있다. 이 방법으로 어떠한 문제든 찾아내고 수정할 수 있다.

프로그래밍 언어의 요소들 중 작은 것부터 큰 것까지 나열하면,
token > statement > code block > function > class > namespace > program 순으로 나열할 수 있다. 
token은 keyword, identifier, literal, operator, separator, white space으로 나뉜다.

Character/Text => Lexer(Tokenisation) => Symbol => Parsing(Structuralization for computer to understand)

프로그래밍에 사용되는 문자, 숫자, 모든 글자가 아스키(ASCII) 또는 UTF-8-16-32로 파싱된다. 
아스키와 UTF는 컴퓨터가 텍스트를 읽을 때 사용하는 글자의 데이터베이스를 부르는 이름이다. 
유니티3D의 모든 레벨에서 볼 수 있는 거의 모든 객체는 클래스에서 인스턴스될 수 있다. 
객체의 인스턴스는 메시지와 이벤트를 통해 다른 객체와 소통할 수 있다.
언제 어디서나 프로그래머는 코드를 최대한 재사용해야 한다. 
일을 잘하는 프로그래머는 변수와 함수에 사용할 유용한 이름을 만드는 데 긴 시간을 할애한다. 
사용 목적과 관련있는 특징을 설명할 때 종종 명사와 형용사를 사용하여 이름을 짓는다. 
변수 이름을 코드 전체에 사용하기 시작하면 수정하기가 어려워진다. 
변경하는 작업을 refactoring이라고 부르는데, 이를 위한 소프트웨어도 있다. 

경험이 있는 사람만이 지나치게 열성적인 헌신이 실수라는 것을 확실하게 볼 수 있다.
필자는 컴퓨터가 여러분의 일상을 지배하지 않게 조심하라고 얘기해주고 싶다.
단일 프로젝트에 인생의 전부를 쏟아 붓는 것이 너무 쉽게 재앙으로 변할 수 있다는 것을 깨달았다. 
어떠한 일도 일어날 수 있다. 프로젝트가 빛을 보기도 전에 취소되기도 한다.
최악의 경우 가망이 없는 프로젝트에 몇 달 혹은 몇 년을 투자해야 할 수도 있다.
거대한 프로젝트에 참여하다 프로젝트를 떠나야 할 수도 있다.
게임 업계는 변덕스럽고 권모술수와 불안함으로 가득차있다. 많이 알수록 업계에 남아 있는 것이 더 쉬울 수 있다.

